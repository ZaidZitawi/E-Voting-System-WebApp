// src/Components/PostComponent/CommentsContainer.jsx
import React, { useState, useEffect } from "react";
import axios from "axios";
import "./post.css";
import "./Dialog.css";
import Comment from "./Comment";
import CommentsDialog from "./CommentsDialog.jsx";

const CommentsContainer = ({ postId }) => {
  const [commentList, setCommentList] = useState([]);
  const [showAllComments, setShowAllComments] = useState(false);
  const [newComment, setNewComment] = useState("");

  // Fetch comments from the backend when the component mounts or postId changes
  useEffect(() => {
    const fetchComments = async () => {
      try {
        const token = localStorage.getItem("authToken");
        if (!token) {
          console.error("No authentication token found. Please log in.");
          return;
        }
        const response = await axios.get(
          `http://localhost:8080/comments/posts/${postId}/comments`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        setCommentList(response.data || []);
      } catch (error) {
        console.error("Error fetching comments:", error);
      }
    };

    fetchComments();
  }, [postId]);

  // Display only the first 2 comments inline
  const visibleComments = commentList.slice(0, 2);

  // Open the dialog to see all comments
  const handleSeeAllComments = () => {
    setShowAllComments(true);
  };

  const handleCloseAllComments = () => {
    setShowAllComments(false);
  };

  // Handle adding a new comment by sending a POST request to the backend
  const handleAddComment = async () => {
    if (newComment.trim()) {
      try {
        const token = localStorage.getItem("authToken");
        const userId = localStorage.getItem("userId");
        if (!token || !userId) {
          console.error("Missing auth token or user ID.");
          return;
        }
        // Construct the CommentDTO payload (commentId is generated by backend)
        const commentDTO = {
          userId: Number(userId),
          postId: postId,
          content: newComment,
          createdAt: new Date().toISOString(),
        };

        const response = await axios.post(
          `http://localhost:8080/comments/add`,
          commentDTO,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        // Append the newly created comment to the comment list
        const createdComment = response.data;
        setCommentList((prevComments) => [...prevComments, createdComment]);
        setNewComment("");
      } catch (error) {
        console.error("Error adding comment:", error);
      }
    }
  };

  return (
    <div className="comments-container">
      {/* Render the first 2 comments */}
      {visibleComments.map((comment) => (
        <Comment
          key={comment.commentId}
          userImage={comment.userProfilePicture} // Use backend field
          userName={comment.userName}
          commentTime={comment.createdAt}
          text={comment.content}
        />
      ))}

      {commentList.length > 2 && (
        <button className="see-all-comments-btn" onClick={handleSeeAllComments}>
          See all comments
        </button>
      )}

      <div className="add-comment">
        <input
          type="text"
          className="add-comment-input"
          value={newComment}
          onChange={(e) => setNewComment(e.target.value)}
          placeholder="Add a comment..."
        />
        <button className="add-comment-btn" onClick={handleAddComment}>
          Add
        </button>
      </div>

      {/* Dialog for displaying all comments */}
      {showAllComments && (
        <CommentsDialog
          comments={commentList}
          onClose={handleCloseAllComments}
        />
      )}
    </div>
  );
};

export default CommentsContainer;
